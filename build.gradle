apply plugin: 'groovy'
apply plugin: 'maven'

def compatibilityVersion = 1.6
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

version = '0.2-SNAPSHOT'
group = 'org.codehaus.gpars'

repositories {
    mavenCentral()
    mavenRepo name: 'sonatype-snapshots', url: 'https://oss.sonatype.org/content/repositories/snapshots'
    mavenRepo name: 'codehaus-snapshots', url: 'http://snapshots.repository.codehaus.org/'
    mavenRepo name: 'codehaus', url: 'http://repository.codehaus.org/'
}

configurations {
    deployerJars
}


dependencies {
    def gaeVersion = '1.6.5'
    groovy 'org.codehaus.groovy:groovy-all:1.8.6'
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-api-labs:$gaeVersion"
    compile 'org.codehaus.gpars:gpars:1.0-beta-2'
    compile 'org.gaelyk:gaelyk:1.2'
    deployerJars "org.apache.maven.wagon:wagon-http-lightweight:2.0"
}

uploadArchives {
    project.ext.deployer = repositories.mavenDeployer {
        uniqueVersion = false
        configuration = configurations.deployerJars
        repository(url: 'https://dav.codehaus.org/repository/gpars/') {
            authentication(userName: codehausUsername, password: codehausPassword)
        }
        snapshotRepository(url: 'https://dav.codehaus.org/snapshots.repository/gpars/') {
            authentication(userName: codehausUsername, password: codehausPassword)
        }
        pom.project {
            name 'GPars App Engine integration'
            description 'Enables GPars on GAE'
            url 'http://gpars.codehaus.org'
            inceptionYear '2012'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        // In the future Gradle will allow to use dynamic props for dependencies to deal with optionals
        pom.whenConfigured {pom ->
            // dependency is a native Maven dependency object (With properties artifactId, groupId, ...)
            pom.dependencies.each {dependency ->
                if (dependency.artifactId in ['gaelyk']) {  //todo perhaps needs to be verified against the real name of the dependency
                    dependency.optional = true
                }
            }
            // Remove test dependencies from all poms
            pom.dependencies.removeAll(pom.dependencies.findAll { it.scope == 'test' })
        }

    }
}

